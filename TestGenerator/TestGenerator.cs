using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TestGen
{
    public class TestGenerator
    {
        private AttributeSyntax TestMethodAttribute = SyntaxFactory.Attribute(SyntaxFactory.ParseName("TestMethod"));
        private AttributeSyntax TestSetupAttribute = SyntaxFactory.Attribute(SyntaxFactory.ParseName("TestInitialize"));
        private AttributeSyntax TestClassAttribute = SyntaxFactory.Attribute(SyntaxFactory.ParseName("TestClass"));

        public TestInfo Generate(string SourceCode)
        {
            SyntaxNode TreeRoot = CSharpSyntaxTree.ParseText(SourceCode).GetRoot();
            var FileName = TreeRoot.DescendantNodes().OfType<ClassDeclarationSyntax>().First().Identifier.ValueText;
            var methods = TreeRoot.DescendantNodes().OfType<MethodDeclarationSyntax>().Where(method => method.Modifiers.Any(SyntaxKind.PublicKeyword));

            NamespaceDeclarationSyntax NamespaceItem = SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName("UnitTests"));
            ClassDeclarationSyntax ClassItem = SyntaxFactory.ClassDeclaration($"{FileName}Test").
                AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword)).
                AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.AttributeList().Attributes.Add(TestClassAttribute)));

            var unit = SyntaxFactory.CompilationUnit().
                AddUsings(FormUsings(TreeRoot)).
                AddMembers(NamespaceItem.
                AddMembers(ClassItem.
                AddMembers(FormMethods(methods)
            )));

            return new TestInfo() { FileName = $"{FileName}Test.cs", TestCode = unit.NormalizeWhitespace().ToFullString() };
        }

        private MethodDeclarationSyntax[] FormMethods(IEnumerable<MethodDeclarationSyntax> methods)
        {
            var ResultMethods = new List<MethodDeclarationSyntax>();
            ResultMethods.Add(GenerateMethod(TestSetupAttribute, "Setup"));
            foreach (MethodDeclarationSyntax item in methods)
                ResultMethods.Add(GenerateMethod(TestMethodAttribute, $"Test{item.Identifier.ValueText}"));

            return ResultMethods.ToArray();
        }

        private MethodDeclarationSyntax GenerateMethod(AttributeSyntax attribute, string MethodName)
        {
            return SyntaxFactory.MethodDeclaration(SyntaxFactory.ParseTypeName("void"), MethodName).
                AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword)).
                AddBodyStatements(FormAsserts(MethodName)).
                AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.AttributeList().Attributes.Add(attribute)));
        }

        private StatementSyntax[] FormAsserts(string MethodName)
        {
            var statements = new List<StatementSyntax>();
            if (MethodName != "Setup")
                statements.Add(SyntaxFactory.ParseStatement("Assert.Fail(\"autogenerated\");"));
            return statements.ToArray();
        }

        private UsingDirectiveSyntax[] FormUsings(SyntaxNode root)
        {
            return root.DescendantNodes().OfType<UsingDirectiveSyntax>().
                Append(SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("Microsoft.VisualStudio.TestTools.UnitTesting"))).
                ToArray();
        }
    }
}
